{"version":3,"sources":["../../../src/controllers/products/productsController.js"],"names":["queryAllProducts","callback","connectionDB","getDBInstance","collection","find","toArray","validId","idProduct","bd_temp","forEach","doc","push","console","log","exists","includes","createNewProduct","newData","newProduct","description","unitPrice","status","Boolean","insertOne","updateProduct","idToUpdate","updatedData","updateOne","$set","returnOriginal","deleteProduct","idToDelete","deleteOne"],"mappings":";;;;;;;AAAA;;AACA;;;;AAGA,MAAMA,gBAAgB,GAAG,MAAOC,QAAP,IAAoB;AAC3C,QAAMC,sBACHC,aADG,GAEHC,UAFG,CAEQ,UAFR,EAGHC,IAHG,CAGE,EAHF,EAIHC,OAJG,CAIKL,QAJL,CAAN;AAKD,CAND;;;;AAQA,MAAMM,OAAO,GAAG,MAAOC,SAAP,IAAqB;AACnC,QAAMC,OAAO,GAAG,EAAhB;AACE,QAAMP,sBACHC,aADG,GAEHC,UAFG,CAEQ,UAFR,EAGHC,IAHG,CAGE,EAHF,EAIHK,OAJG,CAIMC,GAAD,IAAS;AAChBF,IAAAA,OAAO,CAACG,IAAR,CAAaD,GAAG,CAACH,SAAjB;AACD,GANG,CAAN;AAOAK,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,QAAMM,MAAM,GAAGN,OAAO,CAACO,QAAR,CAAiBR,SAAjB,CAAf;AACA,SAAOO,MAAP;AACH,CAZD;;;;AAcA,MAAME,gBAAgB,GAAG,OAAOC,OAAP,EAAgBjB,QAAhB,KAA6B;AAClD,QAAMkB,UAAU,GAAG;AACjBX,IAAAA,SAAS,EAAEU,OAAO,CAACV,SADF;AAEjBY,IAAAA,WAAW,EAAEF,OAAO,CAACE,WAFJ;AAGjBC,IAAAA,SAAS,EAAEH,OAAO,CAACG,SAHF;AAIjBC,IAAAA,MAAM,EAAEC,OAAO,CAACL,OAAO,CAACI,MAAT;AAJE,GAAnB;AAMA,QAAMpB,sBACHC,aADG,GAEHC,UAFG,CAEQ,UAFR,EAGHoB,SAHG,CAGOL,UAHP,EAGmBlB,QAHnB,CAAN;AAIH,CAXD,C,CAaA;;;;;AACA,MAAMwB,aAAa,GAAG,OAAOC,UAAP,EAAmBC,WAAnB,EAAgC1B,QAAhC,KAA6C;AACjE,QAAMC,sBACHC,aADG,GAEHC,UAFG,CAEQ,UAFR,EAGHwB,SAHG,CAIF;AAAEpB,IAAAA,SAAS,EAAEkB;AAAb,GAJE,EAKF;AAAEG,IAAAA,IAAI,EAAEF;AAAR,GALE,EAMF;AAAEG,IAAAA,cAAc,EAAE;AAAlB,GANE,EAOF7B,QAPE,CAAN;AASD,CAVD;;;;AAYA,MAAM8B,aAAa,GAAG,OAAOC,UAAP,EAAmB/B,QAAnB,KAAgC;AACpD,QAAMC,sBACHC,aADG,GAEHC,UAFG,CAEQ,UAFR,EAGH6B,SAHG,CAGO;AAAEzB,IAAAA,SAAS,EAAEwB;AAAb,GAHP,EAGkC/B,QAHlC,CAAN;AAID,CALD","sourcesContent":["import connectionDB from \"../../db/connectionDB\";\nimport { ObjectId } from \"mongodb\";\n\n\nconst queryAllProducts = async (callback) => {\n  await connectionDB\n    .getDBInstance()\n    .collection(\"products\")\n    .find({})\n    .toArray(callback);\n};\n\nconst validId = async (idProduct) => {\n  const bd_temp = [];\n    await connectionDB\n      .getDBInstance()\n      .collection(\"products\")\n      .find({})\n      .forEach((doc) => {\n        bd_temp.push(doc.idProduct);\n      });\n    console.log(bd_temp);\n    const exists = bd_temp.includes(idProduct);\n    return exists;\n}\n\nconst createNewProduct = async (newData, callback) => { \n    const newProduct = {\n      idProduct: newData.idProduct,\n      description: newData.description,\n      unitPrice: newData.unitPrice,\n      status: Boolean(newData.status),\n    };\n    await connectionDB\n      .getDBInstance()\n      .collection(\"products\")\n      .insertOne(newProduct, callback);\n};\n\n//this comprobation is duty to front-end (only fields required)\nconst updateProduct = async (idToUpdate, updatedData, callback) => {\n  await connectionDB\n    .getDBInstance()\n    .collection(\"products\")\n    .updateOne(\n      { idProduct: idToUpdate },\n      { $set: updatedData },\n      { returnOriginal: true },\n      callback\n    );\n};\n\nconst deleteProduct = async (idToDelete, callback) => {\n  await connectionDB\n    .getDBInstance()\n    .collection(\"products\")\n    .deleteOne({ idProduct: idToDelete }, callback);\n};\nexport { queryAllProducts, createNewProduct, updateProduct, deleteProduct, validId };\n "],"file":"productsController.js"}
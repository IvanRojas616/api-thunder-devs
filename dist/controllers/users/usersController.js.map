{"version":3,"sources":["../../../src/controllers/users/usersController.js"],"names":["queryAllUsers","callback","console","log","connectionDB","getDBInstance","collection","find","limit","toArray","createUser","dataUser","insertOne","readOrCreateUser","tokenreq","token","headers","authorization","decoded","split","user","findOne","email","err","response","auth0Id","_id","role","state","editUser","id","edition","filterUser","ObjectId","operation","$set","findOneAndUpdate","upsert","returnOriginal"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEO,MAAMA,aAAa,GAAG,MAAOC,QAAP,IAAoB;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,QAAMC,sBAAaC,aAAb,GAA6BC,UAA7B,CAAwC,OAAxC,EAAiDC,IAAjD,CAAsD,EAAtD,EAA0DC,KAA1D,CAAgE,EAAhE,EAAoEC,OAApE,CAA4ER,QAA5E,CAAN;AACD,CAHI;;;;AAKA,MAAMS,UAAU,GAAG,OAAOC,QAAP,EAAiBV,QAAjB,KAA8B;AACtD,QAAMG,sBACHC,aADG,GAEHC,UAFG,CAEQ,OAFR,EAGHM,SAHG,CAGOD,QAHP,EAGiBV,QAHjB,CAAN;AAID,CALM;;;;AAOA,MAAMY,gBAAgB,GAAG,OAAOC,QAAP,EAAiBb,QAAjB,KAA8B;AAC5DC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAD4D,CAE5D;;AACA,QAAMY,KAAK,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,aAA/B;AACA,QAAMC,OAAO,GAAG,wBAAWH,KAAK,CAACI,KAAN,CAAY,SAAZ,EAAuB,CAAvB,CAAX,CAAhB;AACA,QAAMC,IAAI,GAAGF,OAAO,CAAC,2BAAD,CAApB,CAL4D,CAO5D;;AACA,QAAMd,sBACHC,aADG,GAEHC,UAFG,CAEQ,OAFR,EAGHe,OAHG,CAGK;AAAEC,IAAAA,KAAK,EAAEF,IAAI,CAACE;AAAd,GAHL,EAG4B,OAAOC,GAAP,EAAYC,QAAZ,KAAyB;AACvDtB,IAAAA,OAAO,CAACC,GAAR,CAAYqB,QAAZ;;AACA,QAAIA,QAAJ,EAAc;AACZ;AACA;AACAvB,MAAAA,QAAQ,CAACsB,GAAD,EAAMC,QAAN,CAAR;AACD,KAJD,MAIO;AACL;AACA;AACAJ,MAAAA,IAAI,CAACK,OAAL,GAAeL,IAAI,CAACM,GAApB;AACA,aAAON,IAAI,CAACM,GAAZ,CAJK,CAML;;AACAN,MAAAA,IAAI,CAACO,IAAL,GAAY,SAAZ;AACAP,MAAAA,IAAI,CAACQ,KAAL,GAAa,SAAb;AACA,YAAMlB,UAAU,CAACU,IAAD,EAAO,CAACG,GAAD,EAAMC,QAAN,KAAmB;AACxCvB,QAAAA,QAAQ,CAACsB,GAAD,EAAMH,IAAN,CAAR;AACD,OAFe,CAAhB;AAGD;AACF,GAtBG,CAAN;AAuBD,CA/BM;;;;AAiCA,MAAMS,QAAQ,GAAG,OAAOC,EAAP,EAAWC,OAAX,EAAoB9B,QAApB,KAAiC;AACvD,QAAM+B,UAAU,GAAG;AAAEN,IAAAA,GAAG,EAAE,IAAIO,iBAAJ,CAAaH,EAAb;AAAP,GAAnB;AACA,QAAMI,SAAS,GAAG;AAChBC,IAAAA,IAAI,EAAEJ;AADU,GAAlB;AAIA,QAAM3B,sBAAaC,aAAb,GACHC,UADG,CACQ,OADR,EAEH8B,gBAFG,CAEcJ,UAFd,EAE0BE,SAF1B,EAEqC;AAAEG,IAAAA,MAAM,EAAE,IAAV;AAAgBC,IAAAA,cAAc,EAAE;AAAhC,GAFrC,EAE6ErC,QAF7E,CAAN;AAGD,CATM","sourcesContent":["import connectionDB from \"../../db/connectionDB\";\nimport jwt_decode from \"jwt-decode\";\nimport { ObjectId } from \"mongodb\";\n\nexport const queryAllUsers = async (callback) => {\n    console.log('query');\n    await connectionDB.getDBInstance().collection('users').find({}).limit(50).toArray(callback);\n  };\n\nexport const createUser = async (dataUser, callback) => {\n  await connectionDB\n    .getDBInstance()\n    .collection(\"users\")\n    .insertOne(dataUser, callback);\n};\n\nexport const readOrCreateUser = async (tokenreq, callback) => {\n  console.log(\"i am here\");\n  //1.get data user from token\n  const token = tokenreq.headers.authorization;\n  const decoded = jwt_decode(token.split(\"Bearer \")[1]);\n  const user = decoded[\"http://localhost/userData\"];\n\n  //2.with email or auth0 id, check if user is in bd mongo\n  await connectionDB\n    .getDBInstance()\n    .collection(\"users\")\n    .findOne({ email: user.email }, async (err, response) => {\n      console.log(response);\n      if (response) {\n        //3.if user is in bd, then we send the data user to react\n        //if enter here, the response is the found document\n        callback(err, response);\n      } else {\n        //4.if user doesn't exist, then we create it and send the info to react\n        //this is for mongo creates his own id, and not take auth0 id\n        user.auth0Id = user._id;\n        delete user._id;\n\n        //Here start the theme of roles(dummy rbac arch)\n        user.role = \"no role\";\n        user.state = \"pending\";\n        await createUser(user, (err, response) => {\n          callback(err, user);\n        });\n      }\n    });\n};\n\nexport const editUser = async (id, edition, callback) => {\n  const filterUser = { _id: new ObjectId(id) };\n  const operation = {\n    $set: edition,\n  };\n\n  await connectionDB.getDBInstance()\n    .collection('users')\n    .findOneAndUpdate(filterUser, operation, { upsert: true, returnOriginal: true }, callback);\n};"],"file":"usersController.js"}